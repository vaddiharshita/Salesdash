# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myapi
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  Login:
    handler: handler.Login
    events:
      - http:
          method: post
          path: Login        
  getsingleprofile:
    handler: handler.getsingleprofile
    events:
      - http:
          method: post
          path: getsingleprofile 
    middleware:
      pre:
        - handler.middleware 
  getTODO:
    handler: handler.getTODO
    events:
      - http:
          method: post
          path: getTODO
  getinprogress:
    handler: handler.getinprogress
    events:
      - http:
          method: post
          path: getinprogress
  getcompleted:
    handler: handler.getcompleted
    events:
      - http:
          method: post
          path: getcompleted 
  Insertsingleprofile:
    handler: handler.Insertsingleprofile
    events:
      - http:
          method: post
          path: Insertsingleprofile
  UpdateSingleProfile:
    handler: handler.UpdateSingleProfile
    events:
      - http:
          method: post
          path: UpdateSingleProfile
    middleware:
      pre:
        - handler.middleware
  CampaignProspectwiseCount:
    handler: handler.CampaignProspectwiseCount
    events:
      - http:
          method: post
          path: CampaignProspectwiseCount
  leadsfunnel:
    handler: handler.leadsfunnel
    events:
      - http:
          method: post
          path: leadsfunnel
  prospectGrowth:
    handler: handler.prospectGrowth
    events:
      - http:
          method: post
          path: prospectGrowth
  prospectprogress:
    handler: handler.prospectprogress
    events:
      - http:
          method: post
          path: prospectprogress
  SalespersonwiseSuccessRate:
    handler: handler.SalespersonwiseSuccessRate
    events:
      - http:
          method: post
          path: SalespersonwiseSuccessRate
  Managerwiseprospectcount:
    handler: handler.Managerwiseprospectcount
    events:
      - http:
          method: post
          path: Managerwiseprospectcount
  GetUserListWithFilter:
    handler: handler.GetUserListWithFilter
    events:
      - http:
          method: post
          path: GetUserListWithFilter
  getlead:
    handler: handler.getlead
    events:
      - http:
          method: post
          path: getlead
    middleware:
      pre:
        - handler.middleware 
  insertlead:
    handler: handler.insertlead
    events:
      - http:
          method: post
          path: insertlead
    middleware:
      pre:
        - handler.middleware
  updatelead:
    handler: handler.updatelead
    events:
      - http:
          method: post
          path: updatelead
    middleware:
      pre:
        - handler.middleware 
  GetSingleTask:
    handler: handler.GetSingleTask
    events:
      - http:
          method: post
          path: GetSingleTask
    middleware:
      pre:
        - handler.middleware 
  GetTaskListWithFilter:
    handler: handler.GetTaskListWithFilter
    events:
      - http:
          method: post
          path: GetTaskListWithFilter
    middleware:
      pre:
        - handler.middleware
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
  - serverless-middleware
